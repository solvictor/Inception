version: '3'

services:

  # On cree d'abord le container mariadb car il ne depends pas des autres
  mariadb:
    container_name: mariadb
    build: ./requirements/mariadb/
    volumes:
      - database:/var/lib/mysql/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env

  # On cree aussi le container redis
  redis:
    container_name: redis
    build: ./requirements/bonus/redis
    depends_on:
      - wordpress
    ports:
     - '6379:6379'
    restart: on-failure
    env_file:
      - .env
    volumes:
      - wordpress_files:/var/www/inception
    networks:
      - all
  
  # On cree aussi le container adminer
  adminer:
    container_name: adminer
    build: ./requirements/bonus/adminer
    restart: on-failure
    depends_on:
      - wordpress
      - mariadb
    ports:
      - "8080:8080"
    networks:
      - all

  # On cree ensuite le container wordpress qui depend de mariadb
  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress/
    volumes:
      - wordpress_files:/var/www/inception/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - mariadb

  # On cree enfin le container nginx qui depend de wordpress
  nginx:
    container_name: nginx
    build: ./requirements/nginx/
    ports: # Redirige le port 443 de l'hote vers le port 443 du conteneur
      - '443:443'
    volumes:
      - wordpress_files:/var/www/inception/
    networks: # Le module sera sur le reseau "all"
      - all
    init: true
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - wordpress
      - adminer
      - redis

# On cree des volumes pour les containers qui en ont besoin
volumes:

  # Fichiers de la base de donnee
  database:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/database

  # Fichiers de wordpress
  wordpress_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/wordpress_files

# On cree un reseau "all" de type bridge qui se comportera comme un switch pour connecter les containers
networks:
  all:
    driver: bridge
